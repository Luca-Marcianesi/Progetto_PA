{
	"info": {
		"_postman_id": "35acfd38-dcaa-4f64-9304-c9d75033c44e",
		"name": "ProgettoCollection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48341421",
		"_collection_link": "https://luca-marcianesi-8073193.postman.co/workspace/LucaMarcianesi's-Workspace~137e42cf-1d49-44c5-8e9f-884a940b520e/collection/48341421-35acfd38-dcaa-4f64-9304-c9d75033c44e?action=share&source=collection_link&creator=48341421"
	},
	"item": [
		{
			"name": "test",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/test",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"test"
					]
				}
			},
			"response": []
		},
		{
			"name": "user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Risposta in JSON valida\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"luca\",\r\n    \"surname\": \"marcianesi\",\r\n    \"email\": \"demo@demo.com\",\r\n    \"password\": \"prova123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/user",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.token) {\r",
							"        pm.environment.set(\"TOKEN\", jsonData.token);\r",
							"        console.log(\"Token salvato in variabile di ambiente:\", jsonData.token);\r",
							"    } else {\r",
							"        console.warn(\"Token non trovato nella risposta\");\r",
							"    }\r",
							"}\r",
							"\r",
							"// Stato HTTP 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Risposta in JSON valida\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Controllo che ci sia un campo specifico\r",
							"pm.test(\"Response has userId\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"// Data attuale\r",
							"const now = new Date();\r",
							"\r",
							"// Imposta minuti e secondi a 0\r",
							"now.setMinutes(0, 0, 0);\r",
							"pm.environment.set(\"currentTime\", now.toISOString());\r",
							"\r",
							"const plusOne = new Date(now);\r",
							"plusOne.setHours(now.getHours() + 1)\r",
							"pm.environment.set(\"currentTimePlusOneHours\", plusOne.toISOString());\r",
							"\r",
							"// Calcola la data di domani (1 giorno avanti)\r",
							"const tomorrow = new Date(now);\r",
							"tomorrow.setDate(tomorrow.getDate() + 1);\r",
							"pm.environment.set(\"tomorrowTime\", tomorrow.toISOString());"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"mario.rossi@example.com\",\r\n    \"password\": \"password123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/login",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "loginAdmin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.token) {\r",
							"        pm.environment.set(\"ADMINTOKEN\", jsonData.token);\r",
							"        console.log(\"Token salvato in variabile di ambiente:\", jsonData.token);\r",
							"    } else {\r",
							"        console.warn(\"Token non trovato nella risposta\");\r",
							"    }\r",
							"}\r",
							"// Stato HTTP 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Risposta in JSON valida\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});\r",
							"\r",
							"// Controllo che ci sia un campo specifico\r",
							"pm.test(\"Response has userId\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"lucia.bianchi@example.com\",\r\n    \"password\": \"adminpass\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/login",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Token updated\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"message\");\r",
							"    pm.expect(data.message).to.eql(\"Token updated successfully\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/token?email=demo@demo.com&token=20",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"token"
					],
					"query": [
						{
							"key": "email",
							"value": "demo@demo.com"
						},
						{
							"key": "token",
							"value": "20"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "resource",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 201\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Risposta in JSON valida\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"GPU 4000\",\r\n    \"description\": \"una bella gpu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/resource",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"resource"
					]
				}
			},
			"response": []
		},
		{
			"name": "calendarError",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 404\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"// Risposta in JSON valida\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"resourceId\": 1000,\r\n    \"costPerHour\": 10,\r\n    \"start\": \"2025-10-22T12:00:00Z\",\r\n    \"end\":\"2025-10-22T18:00:00Z\",\r\n    \"title\":\"resou inesistente\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar"
					]
				}
			},
			"response": []
		},
		{
			"name": "calendar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 201\r",
							"pm.test(\"Calendario creao\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"// Risposta in JSON valida\r",
							"pm.test(\"Response is JSON\", function () {\r",
							"    pm.response.to.be.json;\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"resourceId\": 1,\r\n    \"costPerHour\": 10,\r\n    \"start\": \"{{currentTimePlusOneHours}}\",\r\n    \"end\":\"{{tomorrowTime}}\",\r\n    \"title\":\"prova calendario esame\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar"
					]
				}
			},
			"response": []
		},
		{
			"name": "reservation",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"calendar_id\": 1,\r\n    \"title\": \"prova prenotazione\",\r\n    \"start_time\":\"{{currentTime}}\",\r\n    \"end_time\": \"{{currentTimePlusOneHours}}\",\r\n    \"reason\" : \"prenotazione da accettare\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/reservation",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"reservation"
					]
				}
			},
			"response": []
		},
		{
			"name": "approve",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"pm.test(\"Token updated\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"message\");\r",
							"    pm.expect(data.message).to.eql(\"Prenotazione aggiornata\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n \"id\":7,\r\n \"newStatus\":\"approved\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/reservation",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"reservation"
					]
				}
			},
			"response": []
		},
		{
			"name": "checkSlot",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});\r",
							"\r",
							"pm.test(\"Login returns a token\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"message\");\r",
							"    pm.expect(data.message).to.eql(\"occupated\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/slot?calendar_id=3&start=2026-04-26T10:00:00.000Z&end=2026-04-26T11:00:00.000Z",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"slot"
					],
					"query": [
						{
							"key": "calendar_id",
							"value": "3"
						},
						{
							"key": "start",
							"value": "2026-04-26T10:00:00.000Z"
						},
						{
							"key": "end",
							"value": "2026-04-26T11:00:00.000Z"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "calendar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Cancel annullata\", function () {\r",
							"    const data = pm.response.json();\r",
							"    pm.expect(data).to.have.property(\"error\");\r",
							"    pm.expect(data.error).to.eql(\"Prenotazione attiva nel calendario. Cancellazione annullata\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar/1",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "calendar2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 202\r",
							"pm.test(\"Status code is 202\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar/2",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "calendarNotFound",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 404\r",
							"pm.test(\"Calendario eliminato 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar?calendarId=2",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar"
					],
					"query": [
						{
							"key": "calendarId",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "unarchive",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 202\r",
							"pm.test(\"Calendario ripristinato\", function () {\r",
							"    pm.response.to.have.status(202);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar/unarchive/1",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar",
						"unarchive",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "calendarOK",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar?calendarId=1",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar"
					],
					"query": [
						{
							"key": "calendarId",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "reservationFilterState",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contiene reservations con almeno un oggetto\", function () {\r",
							"    // Parsing JSON di risposta\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // Controlla che reservations esista ed è un array\r",
							"    pm.expect(jsonData).to.have.property(\"reservations\");\r",
							"    pm.expect(jsonData.reservations).to.be.an(\"array\");\r",
							"\r",
							"    // Controlla che abbia almeno 1 elemento\r",
							"    pm.expect(jsonData.reservations.length).to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/reservation/state?status=approved&from=2026-04-01T09:00:00.000Z&to=2026-04-30T18:00:00.000Z",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"reservation",
						"state"
					],
					"query": [
						{
							"key": "status",
							"value": "approved"
						},
						{
							"key": "from",
							"value": "2026-04-01T09:00:00.000Z"
						},
						{
							"key": "to",
							"value": "2026-04-30T18:00:00.000Z"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "reservationFilterOptinal",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response contiene reservations con almeno un oggetto\", function () {\r",
							"    // Parsing JSON di risposta\r",
							"    let jsonData = pm.response.json();\r",
							"\r",
							"    // Controlla che reservations esista ed è un array\r",
							"    pm.expect(jsonData).to.have.property(\"reservations\");\r",
							"    pm.expect(jsonData.reservations).to.be.an(\"array\");\r",
							"\r",
							"    // Controlla che abbia almeno 1 elemento\r",
							"    pm.expect(jsonData.reservations.length).to.be.above(0);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/reservation/filter?calendar_id=3&status=pending&from=2026-05-10T08:00:00.000Z",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"reservation",
						"filter"
					],
					"query": [
						{
							"key": "calendar_id",
							"value": "3"
						},
						{
							"key": "status",
							"value": "pending"
						},
						{
							"key": "from",
							"value": "2026-05-10T08:00:00.000Z"
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "loginAlverde",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    const jsonData = pm.response.json();\r",
							"    if (jsonData.token) {\r",
							"        pm.environment.set(\"TOKENNOMONEY\", jsonData.token);\r",
							"        console.log(\"Token salvato in variabile di ambiente:\", jsonData.token);\r",
							"    } else {\r",
							"        console.warn(\"Token non trovato nella risposta\");\r",
							"    }\r",
							"}\r",
							"\r",
							"// Stato HTTP 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"al.verde@example.com\",\r\n    \"password\": \"senzatoken\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/login",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "reservationNoMoney",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// Stato HTTP 401\r",
							"pm.test(\"Status code is 401\", function () {\r",
							"    pm.response.to.have.status(401);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {},
						"requests": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKENNOMONEY}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"calendar_id\": 3,\r\n    \"title\": \"prova prenotazione\",\r\n    \"start_time\":\"2025-11-22T10:00:00Z\",\r\n    \"end_time\": \"2025-11-22T12:00:00Z\",\r\n    \"reason\" : \"prenotazione da accettare\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/reservation",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"reservation"
					]
				}
			},
			"response": []
		},
		{
			"name": "reservaion",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{TOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/reservation/7",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"reservation",
						"7"
					]
				}
			},
			"response": []
		},
		{
			"name": "calendar",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{ADMINTOKEN}}",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"calendarId\": 1,\r\n    \"end\": \"2027-09-26T15:00:00.000Z\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://{{HOST}}:{{PORT}}/api/calendar/end",
					"protocol": "http",
					"host": [
						"{{HOST}}"
					],
					"port": "{{PORT}}",
					"path": [
						"api",
						"calendar",
						"end"
					]
				}
			},
			"response": []
		}
	]
}